/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* 
 * File:   GA.h
 * Author: BrunoVinicius
 *
 * Created on February 27, 2019, 10:07 PM
 */

#ifndef GA_H
#define GA_H

class SimulationType;

#include <vector>
#include <memory>
#include <cassert>
#include <random>
#include <algorithm>
#include <iostream>

#include "Individual.h"
#include "../../Data/InputOutput.h"
#include "../../GeneralClasses/Def.h"

/**
 * @brief Generic genetic algorithm class. This class contain the similar 
 * parameters, such as number of generations, number of individuals, etc, 
 * to all specific genetic algorithms.
 */
class GA {
    
    friend std::ostream& operator<<(std::ostream& ostream, const GA* ga);
public:
    /**
     * @brief Default constructor of a GA algorithm.
     * @param simul Simulation that own this algorithm.
     */
    GA(SimulationType* simul);
    /**
     * @brief Default destructor of a GA algorithm.
     */
    virtual ~GA();
    /**
     * @brief Function to load the GA parameters of an input file.
     */
    virtual void LoadFile();
    
    /**
     * @brief Initialize the GA algorithm with the probability distribution.
     */
    virtual void Initialize();
    /**
     * @brief Initialize the population with random individuals, created only 
     * in the derived class. 
     */
    virtual void InitializePopulation() = 0;
    /**
     * @brief Function to create the new population based on the select 
     * population.
     */
    virtual void CreateNewPopulation() = 0;
    /**
     * @brief Keeps the selected population in the initial population container.
     */
    virtual void KeepInitialPopulation() = 0;
    /**
     * @brief Selects the best population among the total population generated
     * by crossover and mutation. The selection is made first, selecting a 
     * specified number of best individuals, and for last, choosing randomly
     * the rest of the selected population.
     */
    virtual void SelectPopulation() = 0;
    /**
     * @brief Function that saves the best and the worst individuals in their
     * respective containers.
     */
    virtual void SaveIndividuals() = 0;
    
    /**
     * @brief Gets the number of generation of this GA algorithm.
     * @return Number of generations.
     */
    const unsigned int GetNumberGenerations() const;
    /**
     * @brief Function to set the GA total number of generations.
     * @param numberGenerations Total number fo generations.
     */
    void SetNumberGenerations(unsigned int numberGenerations);
    /**
     * @brief Gets the number of individuals of this GA algorithm.
     * @return Number of individuals.
     */
    const unsigned int GetNumberIndividuals() const;
    /**
     * @brief Function to set the GA total number of individuals. This value is
     * the number of individuals that will be selected at the end of each
     * generation.
     * @param numberIndividuals Total number of individuals.
     */
    void SetNumberIndividuals(unsigned int numberIndividuals);
    /**
     * @brief Gets the crossover probability of this GA algorithm.
     * @return Crossover probability.
     */
    const double GetProbCrossover() const;
    /**
     * @brief Function to set the crossover probability value.
     * @param probCrossover Crossover probability.
     */
    void SetProbCrossover(double probCrossover);
    /**
     * @brief Gets the mutation probability of this GA algorithm.
     * @return Mutation probability.
     */
    const double GetProbMutation() const;
    /**
     * @brief Function to set the mutation probability value.
     * @param probMutation Mtation probability.
     */
    void SetProbMutation(double probMutation);
    /**
     * @brief Gets the maximum number of simulations per individual.
     * @return Maximum number of simulations.
     */
    const unsigned int GetMaxNumSimulation() const;
    /**
     * @brief Function to set the maximum number of simulations a individual
     * need to perform.
     * @param maxNumSimulation Maximum  number of simulations.
     */
    void SetMaxNumSimulation(unsigned int maxNumSimulation);

    /**
     * @brief Return the probability generated by the probDistribution.
     * @return Random probability.
     */
    double GetProbDistribution();
    /**
     * @brief Gets the simulation that owns the GA algorithm.
     * @return SimulationType pointer.
     */
    SimulationType* GetSimul() const;
    /**
     * @brief Gets the actual generation of this GA algorithm.
     * @return Actual generation.
     */
    unsigned int GetActualGeneration() const;
    /**
     * @brief Sets the actual generation of this GA algorithm.
     * @param actualGeneration Actual generation.
     */
    void SetActualGeneration(unsigned int actualGeneration);
    /**
     * @brief Function to get the GA network load point.
     * @return Network load.
     */
    double GetLoadPoint() const;
    /**
     * @brief Function to get the GA network load point.
     * @param loadPoint Network load.
     */
    void SetLoadPoint(double loadPoint);

    /**
     * @brief Runs the simulation for the selected population of the GA.
     */
    virtual void RunSelectPop() = 0;
    /**
     * @brief @brief Runs the simulation for the total population of the GA.
     */
    virtual void RunTotalPop() = 0;
    /**
     * @brief Check and run the simulation if there is any individual, of total
     * population, with less simulation than the minimum required.
     */
    virtual void CheckMinSimul() = 0;
    
    /**
     * @brief Function to print the GA data of the actual generation into a
     * output stream.
     * @param ostream Output stream.
     */
    virtual void print(std::ostream& ostream) const = 0;
    /**
     * @brief Function to print the GA parameters into a stream or save then 
     * into a output file.
     * @param ostream Output stream.
     * @return Output stream.
     */
    virtual std::ostream& printParameters(std::ostream& ostream) const;
private:
    /**
     * @brief Pointer to a SimulationType object that owns this algorithm.
     */
    SimulationType* simul;
    /**
     * @brief Total number of individuals.
     */
    unsigned int numberIndividuals;
    /**
     * @brief Total number of generations.
     */
    unsigned int numberGenerations;
    /**
     * @brief Crossover probability.
     */
    double probCrossover;
    /**
     * @brief Mutation probability.
     */
    double probMutation;
    /**
     * @brief Actual generation of this GA algorithm.
     */
    unsigned int actualGeneration;
    /**
     * @brief Number of maximum simulation each individual will do.
     */
    unsigned int maxNumSimulation;
    /**
     * @brief Network load poiint.
     */
    double loadPoint;
    /**
     * @brief Probability distribution used in this GA algorithm for crossover
     * and mutation.
     */
    std::uniform_real_distribution<double> probDistribution;
public:
    /**
     * @brief Random generator.
     */
    static std::default_random_engine random_generator;
};

#endif /* GA_H */

